#! /usr/bin/env ferite

uses 'libweb/httpserver', 'libweb/consoleserver';
uses 'lib/FastChatMCAM';
uses 'sys', 'date';

/* Placeholder globals for debugging */
global {
	object oo;
	string ss;
	array aa;
	number nn;
	number objSrvLastConnectionTime;
	number TIMEOUT;
}

class DummyApplication {
	string realName;
	boolean topLevel;
}

function dumphash (array a) {
	a.map() using (k,v) {
		Console.println("$k => $v");
	};
	return '';
}

object commandline = new ConsoleServer();
object chatserver = new HttpServer(9090);

objSrvLastConnectionTime = 0;
TIMEOUT = 4.5 * 60;

commandline.prompt('chatserver> ');
application = new DummyApplication();
application.realName = 'cention-suite';

commandline.command('x','exit','quit') using (args) {
	Sys.exit(0);
};
commandline.command('d','descriptors') using (args) {
	Console.println(EventLoop.descriptors.join("\n"));
};
commandline.command('h','help') using (args) {
	Console.println([
		'help (h)       : Print this help',
		'descriptor (d) : Print list of file descriptors in use',
		'exit (x)       : Exit cleanly',
		'clear          : Clears screen',
		'',
		'Typing a valid Ferite expression prints the value',
		'of the expression.'
	].join("\n"));
};
commandline.command('clear') using (args) {
	Console.print("\033[2J\033[1;1H");
};
commandline.command('unknown') using (args) {
	// Eval ferite expression by default
	monitor {
		Console.println(eval('return ' + args.join(' ') + ';'));
	}
	handle {
		Console.println('< SYNTAX ERROR >');
	}
};

chatserver.sync_post = true;
chatserver.onRequest() using (req) {
	array commands = [ 'MCAM' , req.pathInfo() ];
	number now = Date.now();
	
	/* Make sure we have connection to objectserver before continuing */
	if (now - objSrvLastConnectionTime > TIMEOUT) {
		JSON.RPC.reconnect('localhost',8080);
	}
	objSrvLastConnectionTime = now;

	req.respond(InternalChat.handleChatRequest(req,commands,req.query));
};

EventLoop.listen();

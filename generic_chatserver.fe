#! /usr/bin/env ferite

uses 'httpserver', 'consoleserver';
uses 'lib/InternalChat';
uses 'lib/ExternalChat';
uses 'date';
uses 'sys';


global {
	number objSrvLastConnectionTime;
	number TIMEOUT;
	array options;
}

class DummyApplication {
	string realName;
	boolean topLevel;
}

function checkRpcConnection () {
	number now = Date.now();
	
	/* Make sure we have connection to objectserver before continuing */
	if (now - objSrvLastConnectionTime > TIMEOUT) {
		JSON.RPC.reconnect('localhost',8080);
	}
	objSrvLastConnectionTime = now;
}

function help () {
	Console.println([
		'Available commands:',
		'd - list all open file descriptors',
		'eval - eval ferite code',
		'exit - terminates program',
		'help - prints this help'
	].join("\n"));
}

options = [
	'server' => 'InternalChat',
	'port' => 9090,
	'console' => false
];

while (argv.size()) {
	string opt = argv.shift();
	switch (opt) {
		case '-server':
			options.server = argv.shift();
			break;
		case '-port':
			options.port = argv.shift().toNumber();
			break;
		case '-console':
			options.console = true;
			break;
		default:
			Console.printlnErr("Unknown argument: $opt");
			Sys.exit(1);
	}
}

objSrvLastConnectionTime = 0;
TIMEOUT = 4.5 * 60;

application = new DummyApplication();
application.realName = 'cention-suite';

if (options.console) {
	object commandLine = new ConsoleServer();
	
	commandLine.prompt('> ');

	commandLine.command('exit') using (args) {
		Sys.exit(0);
	};
	
	commandLine.command('d','descriptors') using (args) {
		Console.println(EventLoop.descriptors.join("\n"));
	};
	
	commandLine.command('eval') using (args) {
		monitor {
			Console.println(eval('return ' + args.join(' ')));
		}
		handle {
			Console.println(err);
		}
	};
	
	commandLine.command('help') using (args) {
		help();
	};
	
	commandLine.command('unknown') using (cmd) {
		if (cmd == [""]) {
			help();
		}
		else {
			Console.println("Unknown command: $cmd");
		}
	};
}

if (options.server == 'InternalChat') {
	object chatserver = new HttpServer(options.port);
	chatserver.sync_post = true;
	chatserver.onRequest() using (req) {
		array commands = [ 'MCAM' , req.pathInfo() ];
		
		Console.println('Got new request!');
		
		checkRpcConnection();
		req.noCache();
		req.respond(InternalChat.handleChatRequest(req,commands,req.query));
	};
}
if (options.server == 'ExternalChat') {
	object externalchat = new HttpServer(options.port);
	externalchat.sync_post = true;
	externalchat.onRequest() using (req) {
		array commands = [ 'MCAM' , req.pathInfo() ];
		checkRpcConnection();
		req.noCache();
		req.respond(ExternalChat.handleChatRequest(req,commands,req.query));	
	};
}

EventLoop.listen();

uses 'reflection';
uses '/cention/webroot/External.app/ChatConfig.feh';
uses 'cmail';
uses 'MailUtilities';
uses 'objrunsrv-workflow';
uses "logger";
uses 'workflow';
uses 'string';

class ChatUpdate {
	[rpc_import 'session:number',
	            'secret:string',
	            'active:boolean',
	            'status:number',
	            'agentName:string',
	            'clientName:string',
	            'messages:array<ChatMessage>'];
}
class ChatMessage {
	[rpc_import 'timestamp:number',
	            'timestampHuman:string',
	            'sender:string',
	            'body:string',
	            'fromAgent:boolean',
	            'fromClient:boolean'];
}
class ChatSession {
	[rpc_import 'id:number',
	            'externalID:number',
	            'externalSessionID:number',
	            'timestampStarted:number',
	            'timestampStartedHuman:string',
	            'timestampAssigned:number',
	            'timestampAssignedHuman:string',
	            'timestampEnded:number',
	            'timestampEndedHuman:string',
	            'timestampLastClientUpdate:number',
	            'timestampLastClientUpdateHuman:string',
	            'timestampLastAgentMessageSent:number',
	            'timestampLastAgentMessageSentHuman:string',
	            'timestampLastClientMessageSent:number',
	            'timestampLastClientMessageSentHuman:string',
	            'timestampClientReportedAsInactive:number',
	            'timestampClientReportedAsInactiveHuman:string',
	            'clientReportedAsOffline:boolean',
	            'clientReportedAsInactive:boolean',
	            'userID:number',
	            'userExternalID:number',
	            'userLogin:string',
	            'userName:string',
	            'areaID:number',
	            'areaExternalID:string',
	            'areaName:string',
	            'clientIP:string',
	            'clientID:number',
	            'clientName:string',
	            'clientEmailAddress:string',
	            'externalData:string',
	            'messages:array<ChatMessage>'];
}

namespace ChatPage {
	string sessionSecret;
	
	function formatDate( number date ) {
		number localOffset = (Config.TimeZoneOffset * 60);
		number localDate = date + localOffset;
		return Date.localDate(localDate).format(ChatConfig.DateFormat);
	}
	
	function chatOpen() {
		if( ChatConfig.UseExternalAPI ) {
			SOAP.RPC.setDefaults(ChatConfig.RPCEndPoint);
			return SOAP.RPC.invoke('withinWorkingHours', [ 'area_id' => ChatConfig.RPCTargetArea ], 'boolean');
		} else {
			object area = Workflow.Area.load(ChatConfig.RPCTargetArea);
			number minutes = area.minutesInsideWorkingTime(Date.now(), 60 /* seconds in 1 minute */);
			if( minutes > 0 )
				return true;
			return false;
		}
	}
	
	function checkIPAddress( string ip ) {
		if( ChatConfig.UseExternalAPI ) {
			return true;
		} else {
			string ipaddress = String.trim(ip, '');
			object iplist = Workflow.BlockedIPAddress.checkBlacklist("${ipaddress}");
			if(iplist) {
				if( iplist.ipAddress )
					return false;
			}
			return true;
		}
	}
	
	function automaticBlockIPAddress(string ip, string email)	{	
		if( ChatConfig.AutomaticBlacklistIP ) {
				object blacklist;
				object chatsession;
				number date_now = Date.now();
				number sameip = 0;
				number errand_id;
				string emailaddress = String.trim(email, '');
				string ipaddress = String.trim(ip, '');
					Workflow.ChatSession.loadSessionByIPAddress( "${ipaddress}" ).each() using ( chatlist ){
						errand_id = chatlist.errand.id;	
						if(date_now - chatlist.timestampStarted < 60 )
							sameip++;
					};
					
				if(sameip > 5){
					chatsession = Workflow.ChatSession.loadSessionByErrand( errand_id );
					
					blacklist = new Workflow.BlockedIPAddress();
					blacklist.setValue('ipAddress', "${ipaddress}");
					blacklist.setValue('timestampWhen', date_now);
					blacklist.setValue('active', true);
					blacklist.setValue('area', chatsession.area);
					blacklist.setValue('email', "${emailaddress}");
					blacklist.save();
					return false;
				}
		}	
		return true;
	}
	
	function getMessageList( object update ) {
		array list = [];
		update.messages.each() using ( message ) {
			if( message.fromAgent ) {
				list[] = [
					'sent' => message.timestamp,
					'sentHuman' => .formatDate(message.timestamp),
					'sender' => message.sender,
					'body' => message.body,
					'fromAgent' => message.fromAgent,
					'fromClient' => message.fromClient
				];
			}
		};
		return list;
	}
	
	function StartChat( array parameters ) {
		string ip = request.remoteIp();
		string email = parameters['email'];
				if( .chatOpen() && .checkIPAddress( ip ) && .automaticBlockIPAddress( ip, email )) {
					object update;
					
					SOAP.RPC.setDefaults(ChatConfig.RPCEndPoint);
					update = SOAP.RPC.invoke('createExtended', [
							'area_id' => ChatConfig.RPCTargetArea,
							'ip_address' => ip,
							'name' => parameters['name'],
							'email' => parameters['email'],
							'question' => parameters['question']
						], 'ChatUpdate');
					
					if( update.session > 0 ) {
						object data = new Workflow.ReportChatData();
						data.setValue('area_id', ChatConfig.RPCTargetArea);
						data.setValue('timestamp_when', Date.now());
						data.setValue('accepted', true);
						data.save();
					} else {
						object data = new Workflow.ReportChatData();
						data.setValue('area_id', ChatConfig.RPCTargetArea);
						data.setValue('timestamp_when', Date.now());
						data.setValue('rejected_unavailable', true);
						data.save();
					}
					
					return JSON.valueToJSON([
						'sessionSecret' => '',
						'sessionID' => update.session,
						'active' => update.active,
						'status' => update.status,
						'agentName' => update.agentName,
						'messages' => .getMessageList(update)
					]);
				}
		return JSON.valueToJSON([ 'closed' => true ]);
	}
	
	function GetUpdate( array parameters ) {
		if( parameters.keyExists('session') and parameters.keyExists('timestamp') )Â {
			if( ChatConfig.UseExternalAPI ) {
				object update;
				array messages;

				SOAP.RPC.setDefaults(ChatConfig.RPCEndPoint);
				
				if( parameters.keyExists('preview') ) {
					update = SOAP.RPC.invoke('getUpdateAndSetNextMessagePreview', [
							'session_id' => parameters['session'].toNumber(),
							'timestamp' => parameters['timestamp'].toNumber(),
							'next_message_preview' => parameters['preview']
						], 'ChatUpdate');
				} else {
					update = SOAP.RPC.invoke('getUpdate', [
							'session_id' => parameters['session'].toNumber(),
							'timestamp' => parameters['timestamp'].toNumber()
						], 'ChatUpdate');
				}
				
				update.messages.each() using ( message ) {
					if( message.fromAgent ) {
						messages[] = [
							'sent' => message.timestamp,
							'sentHuman' => .formatDate(message.timestamp),
							'sender' => message.sender,
							'body' => message.body,
							'fromAgent' => true,
							'fromClient' => false
						];
					}
				};
				return JSON.valueToJSON([
					'session' => update.session,
					'active' => update.active,
					'status' => update.status,
					'agentName' => update.agentName,
					'messages' => messages
				]);
			} else {
				number session_id = parameters['session'].toNumber();
				number timestamp = parameters['timestamp'].toNumber();
				
				object session = Workflow.ChatSession.load(session_id);
				if( session ) {
					array messages = [];
					if( parameters.keyExists('preview') ) {
						session.setValue('nextClientMessagePreview', parameters['preview']);
					}
					session.setValue('timestampLastClientUpdate', Date.now());
					session.save();
					Workflow.ChatMessage.listBySessionAfterTimestamp(session.id, timestamp).each() using ( message ) {
						if( message.user ) {
							messages[] = [
								'sent' => message.timestampSent,
								'sentHuman' => .formatDate(message.timestampSent),
								'sender' => (message.user.chatName ? message.user.chatName : message.user.username),
								'body' => message.message,
								'fromAgent' => true,
								'fromClient' => false
							];
						}
					};
					return JSON.valueToJSON([
						'session' => session.id,
						'active' => session.active,
						'status' => session.status,
						'agentName' => (session.user ? (session.user.chatName ? session.user.chatName : session.user.username) : ''),
						'messages' => messages
					]);
				}
			}
		}
		return JSON.valueToJSON([ 'error' => true ]);
	}
	
	
	function SendMessage( array parameters ) {
		if( parameters.keyExists('session') and parameters.keyExists('message') ) {
			if( ChatConfig.UseExternalAPI ) {
				object update;
				SOAP.RPC.setDefaults(ChatConfig.RPCEndPoint);
				update = SOAP.RPC.invoke('sendMessage', [
						'session_id' => parameters['session'].toNumber(),
						'message' => parameters['message'],
						'timestamp' => Date.now()
					], 'ChatUpdate');
				return JSON.valueToJSON([ 'session' => update.session, 'active' => update.active ]);
			} else {
				object session = Workflow.ChatSession.load(parameters['session'].toNumber());
				if( session and session.active ) {
					object message = new Workflow.ChatMessage();
					message.setValue('timestampSent', Date.now());
					message.setValue('message', parameters['message']);
					message.setValue('session', session.id);
					message.setValue('client', session.client);
					message.save();
					if( message.timestampSent > session.timestampLastClientMessageSent ) {
						session.setValue('timestampLastClientMessageSent', message.timestampSent);
					}
					session.setValue('hasUnseenMessages', true);
					session.setValue('nextClientMessagePreview', '');
					session.save();
					return JSON.valueToJSON([ 'session' => session.id, 'active' => session.active ]);
				}
			}
		}
		return JSON.valueToJSON([ 'error' => true ]);
	}
	
	function SendEmail( array parameters ) {
		object connection = new Mail.Connection();
		object message = new Mail.Message();
		object content = new Mail.MessagePart();
		
		object to;
		object from;
		object reply_to;
		
		object logClosure;
		object file;
		
		to = new Mail.Address(ChatConfig.ToEmailAddress);
		
		from = new Mail.Address(parameters['email']);
		from.name = parameters['name'];
		
		reply_to = new Mail.Address(parameters['email']);
		reply_to.name = parameters['name'];
		
		message.header = new Mail.MessageHeader();
		message.header.to.add(to);
		message.header.from.add(from);
		message.header.reply_to.add(reply_to);
		message.header.subject = ChatConfig.EmailSubject;
		
		content.type = Mail.Mime.TYPETEXT;
		content.subtype = "plain";
		content.charset = "UTF-8";
		content.content = [
			'Name: ' + parameters['name'],
			'E-mail: ' + parameters['email'],
			'Question: ' + parameters['question'] ].join("\n");
		
		message.content = content;
		
		/*
		file = File.create('/cention/logs/chat.log');
		logClosure = closure( string text ) {
			file.writeln(text);
		};
		
		Mail.registerOutput( closure(number type, string value) {
			if( type >= Mail.OUTPUT_NORMAL ) {
				string output = "[mail-module.${Mail.outputTypeToString(type)}] $value";
				file.writeln(output);
			}
		});
		*/
		
		MailUtilities.sendMessage(connection, message, logClosure);
	}
	
	function _hexToString( string hex ) {
		string s;
		for( number i = 0; i < hex.length() - 1; i += 2 ) {
			s += String.numberToByte((hex[i] + hex[i + 1]).hexStringToNumber());
		}
		return s;
	}
}

namespace ExternalChat {
	function handleChatRequest ( object req, array commands, array parameters ) {
		
		// Quick workaround to handle multiple requests.
		// TODO: replace global request variable with request parameter.        
		request = req;

		if( commands ) {
			switch( commands[0] ) {
				case 'MCAM': {
					array channels = [];
					string methodName = commands[1].dissect('.',0).pop();
					object method = new Function(ChatPage, methodName);
					
					allowedToStoreSession = false;
					ExternalQueueInterface.setup();
					GUIKit.isBackgroundEvent = true;
					
					req.contentType('text/json; charset=UTF-8');
					
					if (method) {
						channels[] = HTML.MCAMChannel('Result', commands[1], method.exec(parameters));
					}
					
					return HTML.MCAMEnvelope(channels.join(','));
				}
				default:
					return "";
			}
		}
	}
}


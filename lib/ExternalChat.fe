uses 'ChatConfig.feh';
uses 'cmail';
uses 'MailUtilities';
uses 'objrunsrv-workflow';

class ChatUpdate {
	[rpc_import 'session:number' 'active:boolean' 'status:number' 'agentName:string', 'messages:array<ChatMessage>'];
}
class ChatMessage {
	[rpc_import 'timestamp:number' 'sender:string' 'body:string', 'fromAgent:boolean', 'fromClient:boolean'];
}
class ChatSession {
	[rpc_import 'id:number', 'timestampStarted:number', 'timestampAssigned:number', 'timestampEnded:number', 'messages:array<ChatMessage>'];
}

namespace ChatPage {
	string sessionSecret;
	
	function formatDate( number date ) {
		number localOffset = (Config.TimeZoneOffset * 60);
		number localDate = date + localOffset + Date.timezone();
		return Date.localDate(localDate).format(ChatConfig.DateFormat);
	}
	
	function chatOpen() {
		string currentWeekday = Date.localDate(Date.now()).format('%A');
		string currentHour = Date.localDate(Date.now()).format('%H');
		
		if( ChatConfig.HoursOpen.keyExists(currentWeekday) and ChatConfig.HoursOpen[currentWeekday].valueExists(currentHour) )
			return true;
		
		return false;
	}
	
	function getMessageList( object update ) {
		array list = [];
		update.messages.each() using ( message ) {
			if( message.fromAgent ) {
				list[] = [
					'sent' => message.timestamp,
					'sentHuman' => .formatDate(message.timestamp),
					'sender' => message.sender,
					'body' => message.body,
					'fromAgent' => message.fromAgent,
					'fromClient' => message.fromClient
				];
			}
		};
		return list;
	}
	
	function startChat( array parameters ) {
		if( .chatOpen() ) {
			object update;
			
			SOAP.RPC.setDefaults(ChatConfig.RPCEndPoint);
			update = SOAP.RPC.invoke('create', [
					'area_id' => ChatConfig.RPCTargetArea,
					'name' => parameters['name'],
					'email' => parameters['email'],
					'question' => parameters['question']
				], 'ChatUpdate');
			
			if( update.session > 0 ) {
				object data = new Workflow.ReportChatData();
				data.setValue('area_id', ChatConfig.RPCTargetArea);
				data.setValue('timestamp_when', Date.GMTnow());
				data.setValue('accepted', true);
				data.save();
			} else {
				object data = new Workflow.ReportChatData();
				data.setValue('area_id', ChatConfig.RPCTargetArea);
				data.setValue('timestamp_when', Date.GMTnow());
				data.setValue('rejected_unavailable', true);
				data.save();
			}
			
			return JSON.valueToJSON([
				'sessionSecret' => '',
				'sessionID' => update.session,
				'active' => update.active,
				'status' => update.status,
				'agentName' => update.agentName,
				'messages' => .getMessageList(update)
			]);
		}
		return JSON.valueToJSON([ 'closed' => true ]);
	}
	
	function getUpdate( array parameters ) {
		if( parameters.keyExists('session') and parameters.keyExists('timestamp') )Â {
			number session_id = parameters['session'].toNumber();
			number timestamp = parameters['timestamp'].toNumber();
			
			object session = Workflow.ChatSession.load(session_id);
			if( session ) {
				array messages = [];
				if( parameters.keyExists('preview') ) {
					session.setValue('nextClientMessagePreview', parameters['preview']);
				}
				session.setValue('timestampLastClientUpdate', Date.GMTnow());
				session.save();
				Workflow.ChatMessage.listBySessionAfterTimestamp(session.id, timestamp).each() using ( message ) {
					if( message.user ) {
						messages[] = [
							'sent' => message.timestampSent,
							'sentHuman' => .formatDate(message.timestampSent),
							'sender' => (message.user.chatName ? message.user.chatName : message.user.username),
							'body' => message.message,
							'fromAgent' => true,
							'fromClient' => false
						];
					}
				};
				return JSON.valueToJSON([
					'session' => session.id,
					'active' => session.active,
					'status' => session.status,
					'agentName' => (session.user ? (session.user.chatName ? session.user.chatName : session.user.username) : ''),
					'messages' => messages
				]);
			}
		}
		return JSON.valueToJSON([ 'error' => true ]);
	}
	
	
	function sendMessage( array parameters ) {
		if( parameters.keyExists('session') and parameters.keyExists('message') ) {
			object session = Workflow.ChatSession.load(parameters['session'].toNumber());
			if( session and session.active ) {
				object message = new Workflow.ChatMessage();
				message.setValue('timestampSent', Date.GMTnow());
				message.setValue('message', parameters['message']);
				message.setValue('session', session.id);
				message.setValue('client', session.client);
				message.save();
				if( message.timestampSent > session.timestampLastClientMessageSent ) {
					session.setValue('timestampLastClientMessageSent', message.timestampSent);
				}
				session.setValue('hasUnseenMessages', true);
				session.setValue('nextClientMessagePreview', '');
				session.save();
				return JSON.valueToJSON([ 'session' => session.id, 'active' => session.active ]);
			}
		}
		return JSON.valueToJSON([ 'error' => true ]);
	}
}

namespace ExternalChat {
	function handleChatRequest ( object req, array commands, array parameters ) {

		// Quick workaround to handle multiple requests.
		// TODO: replace global request variable with request parameter.	
		request = req;
		//monitor {
		if( commands ) {
			switch( commands[0] ) {
				case 'MCAM': {
					array channels = [];
					
					allowedToStoreSession = false;
	
					ExternalQueueInterface.setup();
					
					GUIKit.isBackgroundEvent = true;
					req.contentType('text/json; charset=UTF-8');
					
					switch( commands[1] ) {
						case 'GetUpdate':
							channels[] = HTML.MCAMChannel('Result', commands[1], ChatPage.getUpdate(parameters));
							break;
						case 'SendMessage':
							channels[] = HTML.MCAMChannel('Result', commands[1], ChatPage.sendMessage(parameters));
							break;
						case 'StartChat':
							channels[] = HTML.MCAMChannel('Result', commands[1], ChatPage.startChat(parameters));
					}
					
					return HTML.MCAMEnvelope(channels.join(','));
				}
				default:
					return "";
	
			}
		}
		/*}
		handle {
			Console.println("\033[41;33m##########[ERROR]##########\033[0m");
			Console.print("\033[31m");
			Console.println(err.str);
			Console.println("\033[0m");
			return "";
		}*/
	}
}

#! /usr/bin/env ferite

uses 'tcpclient';
uses 'JSON', 'console', 'regexp', 'sys';

function dumpJSON (void json) {
	if (json instanceof JSON.Object)
		return dumpThing(json._JSONVariables,0);
	else
		return dumpThing(json,0);
}

function quote (string txt) {
	if (options.quote) return "\"$txt\"";
	return txt;	
}

function dumpThing (void thing, number indent) {
	array result;
	string opening = '{';
	string closing = '}';
	string tabchar = options.tabchar;
	
	if (thing isa string) {
		return quote(thing);
	}
	else if (thing isa number) {
		return "$thing";
	}
	else if (thing isa array && thing.keys().size()) {
		thing.map() using (k,v) {
			if (v isa array) {
				result.push(tabchar.repeat(indent+1) + quote(k) + ' : ' +
					dumpThing(v,indent+1)
				);
			}
			else if (v instanceof JSON.Object) {
				result.push(tabchar.repeat(indent+1) + quote(k) + ' : ' +
					dumpThing(v._JSONVariables,indent+1)
				);
			}
			else {
				if (v isa string) {
					result.push(tabchar.repeat(indent+1) + quote(k) + ' : ' + quote(v));
				}
				else {
					result.push(tabchar.repeat(indent+1) + quote(k) + ' : ' + v);
				}
			}
		};
	}
	else if (thing isa array) {
		opening = '[';
		thing.each() using (v) {
			if (v isa array) {
				result.push(dumpThing(v,indent+1));
			}
			else {
				if (v isa string) {
					result.push(tabchar.repeat(indent+1) + quote(v));
				}
				else if (v isa array) {
					result.push(tabchar.repeat(indent+1) +
						dumpThing(v,indent+1)
					);
				}
				else if (v instanceof JSON.Object) {
					result.push(tabchar.repeat(indent+1) +
						dumpThing(v._JSONVariables,indent+1)
					);
				}
				else {
					result.push(tabchar.repeat(indent+1) + "$v");
				}
			}
		};
		closing = ']';
	}
	if (result.size()) {
		return opening + "\n"
			+ result.join(",\n") + "\n"
			+ tabchar.repeat(indent) + closing;
	}
	else {
		return "$opening $closing";
	}
}

function searchJson (void json, string search) {
	array j = [ 'thing' => json ];
	object match;
	
	found = 1;
	
	if (j.thing instanceof JSON.Object) {
		j = [ 'thing' => j.thing._JSONVariables ];
	}
	
	while (search.length()) {
		string subsearch;
		match=Regexp.match('([^\.\[]+)[\.\[](.*)',search);
		
		if (match) {
			subsearch=match.capture(0);
			search=match.capture(1);
		}
		else {
			subsearch=search;
			search='';
		}
		
		if (j.thing isa array or j.thing isa object) {
			if (subsearch == 'length' && j.thing isa array) { // array length
				return j.thing.size();
			}
			else if (Regexp.match('\]',subsearch) || (subsearch == 'length' && j.thing isa array)) { // array
				number index;
				void thing;
				subsearch = Regexp.replace('\]',subsearch,'');
				index = subsearch.toNumber();
				if (j.thing.size() > index && index >= 0) {
					thing = j.thing[index];
					if (thing != null) {
						if (thing instanceof JSON.Object) {
							j = [ 'thing' => thing._JSONVariables ];
						}
						else {
							j = [ 'thing' => thing ];
						}
					}
					else {
						found = 0;
						return '';
					}
				}
				else {
					return '';
				}
			}
			else { // object
				void thing = j.thing[subsearch];
				if (thing != null) {
					if (thing instanceof JSON.Object) {
						j = [ 'thing' => thing._JSONVariables ];
					}
					else {
						j = [ 'thing' => thing ];
					}
				}
				else {
					found = 0;
					return '';
				}
			}
		}
	}
	return j.thing;
}

global {
	string buffer;
	void json;
	array options;
	number found;
}

found = 1;
options = [
	'find' => '',
	'multiple' => false,
	'quote' => true,
	'tabchar' => '    '
];

while (argv.size()) {
	string opt = argv.shift();
	switch (opt) {
		case '-find':
			options.find = argv.shift();
			break;
		case '-all':
			options.multiple = true;
			break;
		case '-noquote':
		case '-plain':
			options.quote = false;
			break;
		case '-tabchar':
			options.tabchar = argv.shift();
			break;
		case '-tabs':
			options.tabchar = ' '.repeat(argv.shift().toNumber());
			break;
		default:
			Console.printlnErr("Unknown argument: $opt");
	}
}

while (!Console.stdin.eos()) {
	buffer += Console.stdin.read(2048);
}

json = JSON.parse(buffer);

if (options.find) {
	Console.println(dumpThing(searchJson(json,options.find),0));
}
else {
	Console.println(dumpJSON(json));
}

Sys.exit(!found);
